{
    "name": "goodsceptic dark",
    "author": "goodsceptic",
    "variables":
    {
        "red": "hsl(5, 100%, 50%)",
        "green": "#6aab73",
        "blue": "#56a8f5",
        "orange": "#ce8e6d",
        "yellow": "#d5b778",
        "pink": "#c87cbb",
        "cyan": "hsl(180, 100%, 50%)",
        // "transparent": "#ff000000",  // note: ff needed to force transparency

        "fg": "#bcbec4",
        "bg": "#1e1f22",
        "unimportant": "color(var(fg))",
        "cursor": "#ced0d6",
        "accent": "var(cursor)",
        "selection": "hsl(204, 100%, 70%)",
        "type": "var(yellow)",
        "keyword": "var(orange)",
        "data": "var(green)",
        "meta": "color(var(data) saturation(15%) lightness(50%))",
        "metaKeyword": "color(var(data) saturation(20%) lightness(60%))",
        "header": "color(var(keyword) saturation(80%) lightness(70%))",

        "fgBase": "color(var(fg))",
        "typeRef": "color(var(type))",
        "keywordBase": "color(var(keyword))",
        "dataBase": "color(var(data))",

        "jsonKeys": "var(pink)",
        "numericValues": "var(blue)",
    },
    "globals":
    {
        "foreground": "var(fgBase)",
        "background": "var(bg)",
        "accent": "var(accent)",
        "caret": "var(cursor)",

        // selection
        "selection": "color(var(selection) alpha(0.3))",
        "selection_border_width": "0",
        "inactive_selection": "color(var(selection) alpha(0.2) saturation(0%))",

        // gutter
        // "gutter": "#000", // defaults to background
        "gutter_foreground": "color(var(fg) alpha(0.3))",
        "line_highlight": "color(var(fg) alpha(0.12))",
        "line_diff_width": "2", // width of diff lines (in dp)
        "line_diff_added": "var(green)",
        "line_diff_modified": "color(var(yellow) lightness(65%))",
        "line_diff_deleted": "color(var(red) lightness(60%))",

        // guides
        // alpha part controls color of guides (vertical tab lines)
        "guide": "color(var(fg) alpha(0.06))",

        // decorations
        "highlight": "color(var(selection) alpha(0.4) lightness(70%))", // border of "other" matches
        "find_highlight_foreground": "#000",
        "find_highlight": "var(yellow)",
        "misspelling": "color(var(red) lightness(65%))",
        // "invisibles": "#000",  // defaults to color(foreground alpha(0.35))

        // brackets
        "brackets_options": "foreground bold",
        "brackets_foreground": "var(cursor)",
        "bracket_contents_options": "foreground",
        "bracket_contents_foreground": "var(cursor)",

        // canvas shadow (indicates scroll)
        "shadow": "color(var(cursor) alpha(0.8))",
        "shadow_width": "5",
    },
    "rules": [
        {
            // Comments
            "scope": "comment",
            "foreground": "color(var(fg) alpha(0.35))",
            "font_style": "italic",
            // "foreground_adjust": "alpha(0.3)"
        },

        {
            // meta keyword (may appear in comments)
            "scope": "meta.keyword",
            "foreground": "var(metaKeyword)",
        },
        {
            // meta variable (may appear in comments)
            "scope": "meta.variable",
            "foreground": "var(meta)",
        },
        {
            // meta variable (may appear in comments)
            "scope": "meta.annotation",
            "foreground": "var(meta)",
        },

        {
            // Punctuation
            // separator  e.g. "," and ":" in `{ foo: bar, baz: cat }`
            // terminator e.g. ";" in `x = y;`
            // accessor   e.g. "->" and "." in `foo->bar.baz`
            // section    e.g. "(" and ")" in `foo((baz)bar)`
            // section    e.g. "[" and "]" in `foo[bar]`
            // section    e.g. "{" and "}" in `if { ... }`
            //
            // keyword.operator.type.annotation is for TypeScript
            //   e.g. ":" in
            //   interface Foo {
            //     name :string
            //   }
            //
            // meta.interface keyword.operator.optional is for TypeScript
            //   e.g. "?" in
            //   interface Foo {
            //     name? :string
            //   }
            //
            "scope": "punctuation.separator, punctuation.terminator, punctuation.accessor, punctuation.section, keyword.operator.type.annotation, meta.interface keyword.operator.optional, meta.field.declaration keyword.operator.optional",
            "foreground": "var(unimportant)"
        },

        // Type
        {
            // Type definition
            // e.g. "Foo" in `typedef struct x Foo` (C)
            "scope": "entity.name.type, entity.name.class, meta.type.declaration entity.name.type, entity.name.type.typedef",
            "foreground": "color(var(type) lightness(70%) saturation(90%))"
        },
        {
            // Type reference
            // e.g. "Foo" in `function hello(f :Foo)` (TS)
            "scope": "support.type, meta.type.annotation entity.name.type, source.go storage.type, entity.other.inherited-class",
            "foreground": "var(typeRef)",
            // void getThing(const Foo* p)
            // const meta.function.parameters meta.group storage.modifier
            // Foo   meta.function.parameters meta.group
            // p     meta.function.parameters meta.group variable.parameter
        },

        // Keyword
        {
            // Keyword
            // e.g. "if" and "else" in "if this else that"
            // storage.type.type      e.g. "type" in "type foo = int"
            // storage.type.interface e.g. "interface" in "interface Foo {}"
            // storage.type.class     e.g. "class" in "class Foo {}"
            // keyword.operator.new   e.g. "new" in "new Error()"
            "scope": "keyword, storage, storage.type.keyword, keyword.operator.new, keyword.operator.delete",
            "foreground": "var(keywordBase)",
        },
        {
            "scope": "keyword.operator",
            // "foreground": "var(fgBase)"
            "foreground": "color(var(orange) lightness(80%))"
        },

        // Function
        { // Function definitions
            "scope": "entity.name.function - meta.function-call",
            "foreground": "var(blue)",
            "font_style": "",
        },

        // Data
        { // e.g. "foo" and 42
            // Note: JS inside HTML uses punctuation.definition...
            "scope": "string, constant, string punctuation.definition, constant punctuation.definition",
            "foreground": "var(dataBase)"
        },
        { // e.g. "%d" in `"age: %d"`
            "scope": "string constant",
            "foreground": "color(var(data) lightness(90%))"
        },
        { // e.g. "name" in `"user: ${name}"`
            "scope": "string variable",
            "foreground": "var(fgBase)"
        },
        { // regexp
            "scope": "string.regexp",
            "background": "color(var(keyword) alpha(0.1) lightness(60%))"
        },
        // {
        //   "scope": "constant.language",
        //   "foreground": [
        //     "color(var(yellow) blend(#0f0 70%) lightness(70%))",  // nil, true
        //     "color(var(yellow) blend(#f00 70%) lightness(70%))",  // undefined
        //     "color(var(yellow) blend(#f00 70%) lightness(70%))",    // false, null
        //     "color(var(yellow) blend(#00f 70%) lightness(70%))"
        //   ],
        //   // Uses "Hashed Syntax Highlighting"
        //   // https://www.sublimetext.com/docs/3/color_schemes.html#hashed_syntax_highlighting
        // },

        // XML, HTML etc with tags
        {
            "scope": "meta.tag",
            "foreground": "var(unimportant)"
        },
        { // things inside tag
            "scope": "meta.tag entity, meta.tag.attributes",
            "foreground": "var(fgBase)"
        },
        { // e.g. "a" in `<a href="hello"></a>`
            "scope": "meta.tag entity.name",
            "foreground": "var(typeRef)"
        },

        // Custom

        {
            "scope": "meta.string.html string.quoted.double.html",
            "foreground": "color(var(data))"
        },
        {
            "scope": "meta.string.html string.quoted.double.html punctuation.separator.path.html",
            "foreground": "color(var(data))"
        },
        {
            "scope": "punctuation.definition.tag",
            "foreground": "color(var(type))"
        },
        {
            "scope": "support.type.property-name.css",
            "foreground": "color(var(unimportant))"
        },
        {
            "scope": "meta.property-value.css",
            "foreground": "color(var(data))"
        },
        {
            "scope": "meta.selector.css",
            "foreground": "color(var(type))"
        },
        {
            "scope": "meta.function-call.identifier.css",
            "foreground": "color(var(type))"
        },
        {
            "scope": "constant.numeric.value.css",
            "foreground": "color(var(numericValues))"
        },
        {
            "scope": "constant.character.entity.named.html",
            "foreground": "var(blue)"
        },
        {
            "scope": "constant.character.entity.named.html punctuation.definition.entity.html",
            "foreground": "var(blue)"
        },
        {
            "scope": "constant.character.entity.named.html punctuation.terminator.entity.html",
            "foreground": "var(blue)"
        },

        // JSON Custom
        {
            "scope": "meta.mapping.key string.quoted.double",
            "foreground": "color(var(jsonKeys))"
        },
        {
            "scope": "meta.mapping.key punctuation.definition.string",
            "foreground": "color(var(jsonKeys))"
        },
        {
            "scope": "meta.mapping.key",
            "foreground": "color(var(jsonKeys))"
        },
        {
            "scope": "constant.language.boolean",
            "foreground": "var(orange)"
        },
        {
            "scope": "constant.language.null",
            "foreground": "var(orange)"
        },
        {
            "scope": "constant.numeric.value",
            "foreground": "color(var(numericValues))"
        },
        {
            "scope": "punctuation.separator.decimal",
            "foreground": "color(var(numericValues))"
        },
        {
            "scope": "keyword.operator.arithmetic",
            "foreground": "color(var(numericValues))"
        },
        {
            "scope": "source.json meta.mapping.value.json constant.character.escape.json",
            "foreground": "var(data)"
        },

        // Assembly
        {
            "scope": "storage.register, storage.other.register, constant.language.registers, entity.name.function.reg, constant.language.register",
            "foreground": "var(typeRef)"
        },
        {
            "scope": "source.asm entity.directive, source.asm support.function.directive",
            "foreground": "color(var(yellow) lightness(80%))"
        },

        // Structured text
        {
            "scope": "text punctuation",
            "foreground": "var(unimportant)"
        },
        {
            "scope": "text markup.heading",
            "foreground": "var(fg)",
            "font_style": "bold"
        },
        {
            "scope": "text markup.italic",
            "font_style": "italic"
        },
        {
            "scope": "text markup.bold",
            "font_style": "bold"
        },
        {
            "scope": "text markup.bold & markup.italic",
            "font_style": "bold italic"
        },
        {
            "scope": "text markup.strikethrough",
            "foreground": "var(unimportant)"
        },
        { // List bullets
            // "-" in "- hello\n- world"
            "scope": "text markup.list punctuation.definition.list_item",
            "foreground": "color(var(yellow) lightness(80%))",
            "font_style": "bold"
        },
        // { // List item
        //   "scope": "text markup.list meta.paragraph.list",
        //   "foreground": "color(var(yellow) lightness(92%))",
        // },
        { // table header text
            "scope": "text.html.markdown meta.table.header",
            "foreground": "var(dataBase)",
        },
        { // table lines
            "scope": "text.html.markdown punctuation.separator.table-cell, text.html.markdown meta.table.header-separator punctuation.section.table-header",
            "foreground": "var(dataBase)",
        },
        // link, e.g. [Title](url)
        {
            "scope": "text meta.link",
            "foreground": "var(fg)"
        },
        {
            "scope": "text meta.link markup.underline.link",
            "foreground": "var(unimportant)"
        },
        // image, e.g. ![alt](url)
        {
            "scope": "text meta.image",
            "foreground": "var(unimportant)"
        },
        {
            "scope": "text meta.image markup.underline.link",
            "foreground": "var(fg)"
        },
        { // code, e.g. `...` and ```...```
            "scope": "text markup.raw, text meta.code-fence.definition, text markup.raw.code-fence",
            "background": "color(var(fg) alpha(0.07))"
        },
        {
            "scope": "text meta.code-fence.definition constant",
            "foreground": "var(unimportant)"
        },



        // -------------------------------------------------------------------------------------------
        // diff
        {
            "scope": "source.diff",
            "foreground": "color(var(fg) alpha(0.5))",
            // "font_style": "italic underline"
        },
        { // all meta, including e.g. "@@ -26,6 +26,7 @@"
            "scope": "meta.diff",
            "foreground": "color(var(cyan) saturation(40%) lightness(60%))",
            "font_style": "italic"
        },
        { // header
            "scope": "meta.diff.header",
            "foreground": "var(header)",
            "font_style": "italic"
        },
        { // header prev files e.g. "--- a.c"
            "scope": "meta.diff.header.from-file",
            "foreground": "color(var(red) saturation(90%) lightness(70%))",
        },
        { // header next file e.g. "+++ a.c"
            "scope": "meta.diff.header.to-file",
            "foreground": "color(var(green) saturation(90%) lightness(60%))",
        },

        { // removed line
            "scope": "markup.deleted",
            "foreground": "color(var(red) saturation(65%) lightness(70%))",
            // "background": "color(var(red) saturation(10%) lightness(10%))",
            // "background": "#151515",
            "background": "color(var(bg) lightness(9%))",
        },
        { // added line
            "scope": "markup.inserted",
            "foreground": "color(var(green) saturation(90%) lightness(80%))",
            // "background": "color(var(green) saturation(10%) lightness(13%))",
        },


        // -------------------------------------------------------------------------------------------
        // misc
        {
            "scope": "invalid.deprecated",
            "foreground": "var(red)",
            "font_style": "italic underline"
        },
        {
            "scope": "invalid.illegal",
            "foreground": "var(fg)",
            "background": "var(red)"
        },

        // {
        //   "scope": "meta.block.go",
        //   "foreground": "var(fg)",
        //   "background": "var(red)"
        // },

        // Example of Hashed Syntax Highlighting
        // https://www.sublimetext.com/docs/3/color_schemes.html#hashed_syntax_highlighting
        // Note: It seems that "source - punctuation" means "source minus punctuation", but
        // I'm not sure. I can't find documentation on this.
        // {
        //   "scope": "source - punctuation - keyword",
        //   "foreground": ["hsl(200, 60%, 70%)", "hsl(330, 60%, 70%)"]
        // }
    ]
}